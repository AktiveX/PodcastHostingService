name: Frontend Deployment

on:
  push:
    branches: [dev, staging, main]
    paths: ['frontend/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      resource-group: ${{ steps.env.outputs.resource-group }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            case "${{ github.ref }}" in
              refs/heads/main)
                echo "environment=prod" >> $GITHUB_OUTPUT
                ;;
              refs/heads/staging)
                echo "environment=staging" >> $GITHUB_OUTPUT
                ;;
              refs/heads/dev)
                echo "environment=dev" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "environment=dev" >> $GITHUB_OUTPUT
                ;;
            esac
          fi
          
          # Set resource group based on environment
          if [ "${{ steps.env.outputs.environment }}" == "prod" ]; then
            echo "resource-group=rg-podcast-prod" >> $GITHUB_OUTPUT
          elif [ "${{ steps.env.outputs.environment }}" == "staging" ]; then
            echo "resource-group=rg-podcast-staging" >> $GITHUB_OUTPUT
          else
            echo "resource-group=rg-podcast-dev" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Function App URL
        id: get-function-app
        run: |
          FUNCTION_APP_NAME=$(az functionapp list \
            --resource-group ${{ needs.determine-environment.outputs.resource-group }} \
            --query "[0].name" \
            --output tsv)
          FUNCTION_APP_URL="https://${FUNCTION_APP_NAME}.azurewebsites.net/api"
          echo "function-app-url=$FUNCTION_APP_URL" >> $GITHUB_OUTPUT

      - name: Get Static Web App deployment token
        id: get-swa-token
        run: |
          SWA_NAME=$(az staticwebapp list \
            --resource-group ${{ needs.determine-environment.outputs.resource-group }} \
            --query "[0].name" \
            --output tsv)
          SWA_TOKEN=$(az staticwebapp secrets list \
            --name $SWA_NAME \
            --resource-group ${{ needs.determine-environment.outputs.resource-group }} \
            --query "properties.apiKey" \
            --output tsv)
          echo "swa-token=$SWA_TOKEN" >> $GITHUB_OUTPUT
          echo "swa-name=$SWA_NAME" >> $GITHUB_OUTPUT

      - name: Create environment file
        run: |
          cd frontend
          cat > .env << EOF
          VUE_APP_API_URL=${{ steps.get-function-app.outputs.function-app-url }}
          VUE_APP_AUTH_CLIENT_ID=${{ vars.AAD_CLIENT_ID }}
          VUE_APP_AUTH_AUTHORITY=https://login.microsoftonline.com/${{ vars.AAD_TENANT_ID }}
          VUE_APP_ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}
          EOF

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.get-swa-token.outputs.swa-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend"
          output_location: "dist"

      - name: Get Static Web App URL
        run: |
          SWA_URL=$(az staticwebapp show \
            --name ${{ steps.get-swa-token.outputs.swa-name }} \
            --resource-group ${{ needs.determine-environment.outputs.resource-group }} \
            --query "defaultHostname" \
            --output tsv)
          echo "Static Web App URL: https://$SWA_URL"
